Challenge Explanation:

The maximum sum subarray problem consists in finding the maximum sum of a contiguous subsequence in an array or list of integers:

maxSequence [-2, 1, -3, 4, -1, 2, 1, -5, 4]
-- should be 6: [4, -1, 2, 1]
Easy case is when the list is made up of only positive numbers and the maximum sum is the sum of the whole array. If the list is made up of only negative numbers, return 0 instead.

Empty list is considered to have zero greatest sum. Note that the empty list or array is also a valid sublist/subarray.



CODE:

import numpy as np
def max_sequence(arr):
    start = -1
    #Cut off beginning negatives
    for i in range(0,len(arr)):
        if arr[i] > 0:
            start += i + 1
            break
            
        if arr[i] <0:
            continue
    #Return 0 if empty
    if not arr:
        return 0
    #Return 0 if there is no positive numbers
    if start == -1:
        return 0
    
    #split into subarrays to find highest number to progress from
    #sets 
    l = []
    positive = []
    arr = arr[start:]
    for k in range (0, len(arr), 2):
        if k + 1 > len(arr) - 1:
            k -= 1
        if k >= 2 and arr[k] + arr[k-1] > 0:
            l.append([k-1 ,arr[k-1] + arr[k]])
        if k < len(arr) and arr[k] + arr[k + 1] > 0:    
            l.append([k, arr[k] + arr[k+1]])
        if k <= len(arr) and arr[k] > 0: 
            positive.append(k)
        if k <= len(arr) and arr[k + 1] > 0:
            positive.append(k + 1)
    
    result = []

    #iterate through indexes saved in l, in each pass start at positive index
    #add all sums from until next positive, in list return all sums 
    for j,k in l:
        sum = 0
        for i in range(j, len(arr)):
            sum += arr[i]
            if i in positive:
                result.append(sum)
                
    #return max sum in result list
    if result:
        return(max(result))
