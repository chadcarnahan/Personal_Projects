Challenge Explanation:

If we were to set up a Tic-Tac-Toe game, we would want to know whether the board's current state is solved, wouldn't we? Our goal is to create a function that will check that for us!

Assume that the board comes in the form of a 3x3 array, where the value is 0 if a spot is empty, 1 if it is an "X", or 2 if it is an "O", like so:

[[0, 0, 1],
 [0, 1, 2],
 [2, 1, 0]]
We want our function to return:

-1 if the board is not yet finished (there are empty spots),
1 if "X" won,
2 if "O" won,
0 if it's a cat's game (i.e. a draw).

CODE:

def is_solved(board):
    import numpy as np
    board = np.reshape(board, 9,9)
    print(board)
    l = []
    
    for i in range(0, len(board)-1, 3):
        l.append([board[i],board[i+1],board[i+2]])
        if i == 0:
            l.append([board[i],board[i+4],board[i+8]]) 
        if i == 3:
            l.append([board[i-1],board[i+1],board[i+3]])
            
    for i in range(0, 3):
        l.append([board[i],board[i+3],board[i+6]])
        
    flag = 0
    
    for k in l:        
        if k.count(1) == 3:
            return 1
        if k.count(2) == 3:
            return 2
        
        if k.count(0) >= 2:
            flag = 1
        if k.count(0) >= 1 and k.count(2) >= 2 or k.count(0) >= 1 and k.count(1) >= 2:
            flag = 1
    if flag == 1:
        return -1
    return 0
    
