Challenge Explanation:

Create a RomanNumerals class that can convert a roman numeral to and from an integer value. It should follow the API demonstrated in the examples below. Multiple roman numeral values will be tested for each helper method.

Modern Roman numerals are written by expressing each digit separately starting with the left most digit and skipping any digit with a value of zero. In Roman numerals 1990 is rendered: 1000=M, 900=CM, 90=XC; resulting in MCMXC. 2008 is written as 2000=MM, 8=VIII; or MMVIII. 1666 uses each Roman symbol in descending order: MDCLXVI.


CODE: 

class RomanNumerals:
    def to_roman(val):
        import math
        #create dict to find values for each number
        dict = {1000: "M", 900: "CM", 500: "D", 400: "CD",
               100:"C", 90: "XC", 50: "L", 40: "XL", 10: "X",
               9:"IX", 5: "V", 4: "IV", 1: "I"}
        roman = []
        
        #loop through use math floor to find how many times a dict value is needed
        #subtract based on how many needed
        for i in dict:
            if i <= val:
                x = math.floor(val / i)
                print(x)
                roman.append(dict[i] * x)
                val -= x * i
            if val == 0:
                break
                
        #return list objects together to form Roman Numeral 
        return "".join(roman)
    
    def from_roman(val):
        import math
        #Create dict to reference values for each numeral
        dict = {"M": 1000, "CM": 900, "D":500, "CD": 400, "C":100,
               "XC":90, "L":50, "XL": 40, "X": 10, "IX": 9, "V": 5,
                "IV": 4, "I": 1}
        
        combos = []
        num = 0
        
        #Find all possible duos so I can remove and add values of subtractor combos
        for i in range(0, len(val)):
            if i == len(val):
                combos.append(val[i])
            if i < len(val)-1:
                combos.append([val[i],val[i + 1]])
        
        #Remove them if they're found in dict
        for i in combos:
            if "".join(i) in dict:
                val = val.replace("".join(i), "")
                num += dict["".join(i)]
                
        #If no numerals left return the number value        
        if not val:
            return num
        
        #now add the rest of the numerals one by one 
        for i in val:
            num += dict[i]
            
        #Return final number value 
        return num
